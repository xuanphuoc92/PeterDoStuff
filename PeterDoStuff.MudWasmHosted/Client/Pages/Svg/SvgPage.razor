@page "/svg"
@using MudBlazor.Services
@using PeterDoStuff.Graphics
@inject IDialogService DialogService
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<PlaygroundTitle Page="svg" />

<MudText>
    Inspirations and References:
</MudText>
<MudList>
    <MudListItem>
        <MudLink Href="https://youtu.be/qlfh_rv6khY?si=KA6yOEJZD7lu3JoY" Target="_blank">
            <MudIcon Icon="@Icons.Custom.Brands.YouTube" Size="Size.Medium"></MudIcon>
            A simple procedural animation technique
        </MudLink>
    </MudListItem>
    <MudListItem>
        <MudLink Href="https://swharden.com/blog/2021-01-07-blazor-canvas-animated-graphics/" Target="_blank">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Medium"></MudIcon>
            Draw Animated Graphics in the Browser with Blazor WebAssembly
        </MudLink>
    </MudListItem>
</MudList>

<MudCheckBox @bind-Value="showAll">Gallery</MudCheckBox>

@if (showAll)
{
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Reset" StartIcon="@Icons.Material.Filled.Replay">Reset</MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.ArrowBackIos" OnClick="Prev">Prev</MudButton>
    <MudButton EndIcon="@Icons.Material.Filled.ArrowForwardIos" OnClick="Next">Next</MudButton>

    <MudDivider Class="my-4" />

    <MudGrid>
        @for (int i = pageStart; i < Math.Min(pageStart + pageItems, gallery.Canvases.Count); i++)
        {
            var demo = gallery.Canvases[i];
            <MudItem xs="12" md="4">
                <MudText Class="mb-2">@demo.Name</MudText>
                <CanvasSvg Canvas="demo" />
            </MudItem>
        }
    </MudGrid>
}
else
{    
    @for (int i = 0; i < gallery.CanvasFactories.Count; i++)
    {
        var factory = gallery.CanvasFactories[i];
        var demo = gallery.Canvases[i];
        <MudButton Class="ma-1" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenCanvasDialog(factory)">@demo.Name</MudButton>
    }

    <MudDialog @bind-IsVisible="_dialogVisible" Options="_dialogOptions">
        <DialogContent>
            <CanvasSvg Canvas="_dialogCanvas" />
        </DialogContent>
    </MudDialog>
}

@code {
    private bool _dialogVisible = false;
    private readonly DialogOptions _dialogOptions = new() { FullScreen = true, CloseButton = true };
    private int _width = 0;
    private int _height = 0;
    private CanvasModel _dialogCanvas;

    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _width = browserViewportEventArgs.BrowserWindowSize.Width;
        _height = browserViewportEventArgs.BrowserWindowSize.Height;
        return InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OpenCanvasDialog(Func<int, int, Style, CanvasModel> factory)
    {
        _dialogVisible = true;
        _dialogCanvas = factory(_width - 100, _height -100, style);
        InvokeAsync(StateHasChanged);
    }

    private Gallery gallery;
    // private CanvasModel canvas;
    private bool showAll;
    int pageStart = 0;
    int pageItems = 6;

    private void Prev()
    {
        if (pageStart <= 0)
            return;
        pageStart -= pageItems;
    }

    private void Next()
    {
        if (pageStart + pageItems >= gallery.Canvases.Count)
            return;
        pageStart += pageItems;
    }

    Style style = new Style()
    {
        StrokeColor = Colors.DeepPurple.Accent3,
        StrokeWidth = 4,
        FillColor = Colors.Grey.Darken4,
        FillOpacity = 0.2
    };
    private Timer timer;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        gallery = new(style);
        // canvas = gallery.Canvases.Last();
        timer = new (Tick, null, 0, 10);
    }

    private void Reset()
    {
        // int currentIndex = gallery.Canvases.IndexOf(canvas);
        gallery = new(style);
        // canvas = gallery.Canvases[currentIndex];
        InvokeAsync(StateHasChanged);
    }

    private void Tick(object? _ = null)
    {
        if (showAll)
            foreach (var demo in gallery.Canvases)
                InvokeAsync(() => demo.Resolve());
        else if (_dialogCanvas != null)
        {
            // InvokeAsync(() => canvas.Resolve());
            InvokeAsync(() => _dialogCanvas.Resolve());
        }
        InvokeAsync(StateHasChanged);
    }
}
